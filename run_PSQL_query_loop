######### 2025.03.26 16:45:00 ################################## ADATDOKI ######
# Interakt√≠v PSQL lek√©rdez√©s futtat√°sa √©s eredm√©ny megjelen√≠t√©se.
#
# A Colab Secrets seg√≠ts√©g√©vel kezeli a PostgreSQL jelsz√≥t.
# Szab√°lyos PostgreSQL lek√©rdez√©seket fogad sz√∂veges form√°ban.
# Opcion√°lisan megadhat√≥ t√°bla nev√©t haszn√°l, de alap√©rtelmezettk√©nt a "alap√©rtelmezett" t√°bl√°t c√©lozza.
# A lek√©rdez√©s eredm√©nyeit pandas DataFrame-k√©nt adja vissza. (SQLAlchemy)
# connection pool-lal √©s timeouttal (1 perc = 60 m√°sodperc)
#
# A f√ºggv√©ny egy sz√∂vegmez≈ët √©s egy futtat√°s gombot jelen√≠t meg, amelyek seg√≠ts√©g√©vel
# a felhaszn√°l√≥ PostgreSQL lek√©rdez√©seket futtathat. Az eredm√©nyeket pandas DataFrame-k√©nt
# jelen√≠ti meg, √©s m√©ri a lek√©rdez√©s v√©grehajt√°si idej√©t.
#
# Param√©terek:
#     width (int): A sz√∂vegmez≈ë sz√©less√©ge pixelben (alap√©rtelmezett: 1000).
#     height (int): A sz√∂vegmez≈ë magass√°ga pixelben (alap√©rtelmezett: 200).
#########1#########2#########3#########4#########5#########6#########7#########8

# Importok
import importlib.util
import sys
import subprocess
from ipywidgets import widgets, HBox
from IPython.display import display
import pandas as pd
import time  # Id≈ëm√©r√©shez

def install_if_missing(package_name, pip_name=None):
    if importlib.util.find_spec(package_name) is None:
        print(f"üì¶ Telep√≠t√©s: {pip_name or package_name}")
        subprocess.check_call([sys.executable, "-m", "pip", "install", pip_name or package_name])
    else:
        print(f"‚úÖ M√°r telep√≠tve: {package_name}")

# K√∂nyvt√°rak ellen≈ërz√©se √©s telep√≠t√©se
install_if_missing("psycopg2", "psycopg2-binary")
install_if_missing("sqlalchemy")
install_if_missing("ipywidgets")

# Glob√°lis engine l√©trehoz√°sa (csak egyszer inicializ√°ljuk)
connection_string = None
engine = None

from sqlalchemy import create_engine, text
def init_db_connection():
    """Kapcsolat inicializ√°l√°sa, ha m√©g nem l√©tezik."""
    global engine, connection_string
    if engine is None:
        # Kapcsolati adatok megad√°sa
        host = "hh-pgsql-public.ebi.ac.uk"  # pl. "localhost" vagy egy IP-c√≠m
        database = "pfmegrnargs" # Cser√©ld ki az adatb√°zis nev√©re
        user = "reader" # Cser√©ld ki a felhaszn√°l√≥nevedre
        password = "NWDMCE5xdipIjRrp" # Cser√©ld ki a saj√°tra
        # password = userdata.get("password") # Jelsz√≥ lek√©r√©se a Colab Secrets-b≈ël
        port = "5432"  # Alap√©rtelmezett PostgreSQL port

        # SQLAlchemy kapcsolat URI
        connection_string = f"postgresql+psycopg2://{user}:{password}@{host}:{port}/{database}"

        # Engine l√©trehoz√°sa connection pool-lal √©s timeouttal (1 perc = 60 m√°sodperc)
        engine = create_engine(
            connection_string,
            pool_size=5,          # Maximum 5 kapcsolat a pool-ban
            max_overflow=0,       # Nincs tov√°bbi kapcsolat a pool-on k√≠v√ºl
            pool_timeout=30,      # 30 m√°sodperc v√°rakoz√°s, ha nincs szabad kapcsolat
            pool_recycle=60       # 60 m√°sodperc ut√°n √∫jrahasznos√≠tja a kapcsolatot (timeout)
        )
        print("Kapcsolat inicializ√°lva!")
    return engine

# PostgreSQL lek√©rdez≈ë f√ºggv√©ny
def run_psql_query(query, table_name="teleprompter_hashed"):
    """
    F√ºggv√©ny PostgreSQL lek√©rdez√©sek futtat√°s√°ra.

    Param√©terek:
        query (str): A futtatand√≥ SQL lek√©rdez√©s sz√∂vege.
        table_name (str, opcion√°lis): A c√©lzott t√°bla neve. Alap√©rtelmezett: "pfmegrnargs".

    Visszat√©r:
        pandas.DataFrame: A lek√©rdez√©s eredm√©nye DataFrame form√°tumban.
    """
    # Kapcsolat inicializ√°l√°sa
    engine = init_db_connection()

    try:
        # Ha a query nem tartalmaz FROM vagy JOIN-t, f≈±zz√ºk hozz√° az alap√©rtelmezett t√°bl√°t
        query_upper = query.upper()
        if "FROM" not in query_upper and "JOIN" not in query_upper:
            query = f"SELECT * FROM {table_name} {query}"
        else:
            query = query

        # Lek√©rdez√©s futtat√°sa
        with engine.connect() as connection:
            df = pd.read_sql(text(query), connection)
        print(f"Lek√©rdez√©s sikeres:\n\n{query}")
        return df

    except Exception as e:
        print(f"Hiba t√∂rt√©nt a lek√©rdez√©s sor√°n: {e}")
        return None

# Kapcsolat manu√°lis lez√°r√°sa (opcion√°lis)
def close_db_connection():
    """Kapcsolat lez√°r√°sa, ha m√°r nincs r√° sz√ºks√©g."""
    global engine
    if engine:
        engine.dispose()
        engine = None
        print("Kapcsolat lez√°rva.")

# # Kapcsolat lez√°r√°sa (opcion√°lis, ha v√©gezt√©l)
#   close_db_connection()

# Sz√ºks√©ges f√ºggv√©nyek √©s v√°ltoz√≥k list√°ja
REQUIRED_DEPENDENCIES = [
    'run_psql_query',  # PSQL lek√©rdez√©s futtat√°s√°hoz sz√ºks√©ges f√ºggv√©ny
    'close_db_connection',  # Adatb√°zis kapcsolat lez√°r√°s√°hoz sz√ºks√©ges f√ºggv√©ny
    'init_db_connection',  # Adatb√°zis kapcsolat inicializ√°l√°s√°hoz sz√ºks√©ges f√ºggv√©ny
]

# Hibakezel√©s: Ellen≈ërizze, hogy a sz√ºks√©ges f√ºggv√©nyek √©s v√°ltoz√≥k l√©teznek-e
def check_and_load_dependencies():
    import importlib.util
    import sys
    import subprocess

    def install_if_missing(package_name, pip_name=None):
        if importlib.util.find_spec(package_name) is None:
            print(f"üì¶ Telep√≠t√©s: {pip_name or package_name}")
            subprocess.check_call([sys.executable, "-m", "pip", "install", pip_name or package_name])
        else:
            print(f"‚úÖ M√°r telep√≠tve: {package_name}")

    try:
        install_if_missing("psycopg2", "psycopg2-binary")
        install_if_missing("sqlalchemy")
        install_if_missing("ipywidgets")

        # Sz√ºks√©ges importok
        global widgets, HBox, display, pd, time
        from ipywidgets import widgets, HBox
        from IPython.display import display
        import pandas as pd
        import time

        return True

    except Exception as e:
        print(f"Hiba a f√ºgg≈ës√©gek ellen≈ërz√©se/telep√≠t√©se k√∂zben: {e}")
        return False

# Ciklikus PSQL lek√©rdez√©s futtat√°sa √©s eredm√©ny megjelen√≠t√©se
def run_query_loop(width=1000, height=200, row=None):
    # Ellen≈ërizze a f√ºgg≈ës√©geket
    if not check_and_load_dependencies():
        return

    # Sz√∂vegmez≈ë a lek√©rdez√©s bek√©r√©s√©hez
    query_input = widgets.Textarea(
        value="",
        placeholder="Adja meg a PSQL lek√©rdez√©st...",
        description="Lek√©rdez√©s:",
        layout={"width": f"{width}px", "height": f"{height}px"},
    )

    # Gomb a lek√©rdez√©s futtat√°s√°hoz
    run_button = widgets.Button(description="Futtat√°s")

    # Kimenet megjelen√≠t√©s√©hez
    output = widgets.Output()

    # Gomb esem√©nykezel≈ëje
    def on_button_clicked(b):
        query_value = query_input.value.strip()
        if query_value.lower() == "exit":
            with output:
                print("Kil√©p√©s a ciklusb√≥l.")
                close_db_connection()
            return

        with output:
            output.clear_output()
            start_time = time.time()
            result = run_psql_query(query_value)
            end_time = time.time()
            elapsed_time = end_time - start_time

            if result is not None:
                print("\nLek√©rdez√©s eredm√©nye:")
                if row is None:
                    display(result)
                else:
                    display(result.head(row))
                print(f"\nLek√©rdez√©s id≈ëtartama: {elapsed_time:.2f} m√°sodperc")
            else:
                print("Nem siker√ºlt lek√©rdezni az adatokat.")

    run_button.on_click(on_button_clicked)

    # Widgetek megjelen√≠t√©se
    display(HBox([query_input, run_button]), output)

# Teszt lek√©rdez√©s
# "SELECT * FROM rnc_database LIMIT 5;"

    # Futtat√°s minta
run_query_loop(row=None,width=1100, height=250)
